package game_test

import (
	"reflect"
	"testing"

	"github.com/kesopeso/sudoku-go/game"
)

func TestCrossSolver(t *testing.T) {
	t.Run("calculate new cross solutions", func(t *testing.T) {
		cells := getCells()
		state := game.NewState(cells)
		crossSolver := game.NewCrossSolver(state)

		want := []int{4, 5}
		got := crossSolver.GetSolutions(game.NewPosition(1, 1))

		if !reflect.DeepEqual(want, got) {
			t.Fatalf("solution calculation failed, want: %v, got: %v", want, got)
		}

		want = []int{7}
		got = crossSolver.GetSolutions(game.NewPosition(7, 7))

		if !reflect.DeepEqual(want, got) {
			t.Fatalf("solution calculation failed, want: %v, got: %v", want, got)
		}
	})
}

func getCells() [][][]int {
	return [][][]int{
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{3},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{6},
			{9},
			{3},
			{2},
			{1},
			{8},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{5},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{3, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{4},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{2},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{7},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{6},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			{4, 5, 6, 9},
			{2},
			{9},
			{3},
			{6},
			{2, 3, 4, 5, 6, 9},
			{1},
			{7, 8, 9},
			{1, 2, 3, 4, 5, 6, 9},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{6},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{8, 9},
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
	}
}
